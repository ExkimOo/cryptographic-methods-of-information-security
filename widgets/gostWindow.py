# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'gostWindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import os.path
from time import time

from PyQt5 import QtCore, QtGui, QtWidgets
import bitarray
from PyQt5.QtWidgets import QFileDialog

from cyphers.gost_cypher import GOST as gost


class Ui_GOST(object):
    def setupUi(self, GOST):
        GOST.setObjectName("GOST")
        GOST.resize(1021, 669)
        self.type = QtWidgets.QComboBox(GOST)
        self.type.setGeometry(QtCore.QRect(30, 50, 959, 25))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.type.setFont(font)
        self.type.setObjectName("type")
        self.type.addItem("")
        self.type.addItem("")
        self.layoutWidget = QtWidgets.QWidget(GOST)
        self.layoutWidget.setGeometry(QtCore.QRect(30, 80, 961, 521))
        self.layoutWidget.setObjectName("layoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.layoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.input = QtWidgets.QTextEdit(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.input.setFont(font)
        self.input.setObjectName("input")
        self.verticalLayout.addWidget(self.input)
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.writeInputToFileButton = QtWidgets.QPushButton(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.writeInputToFileButton.setFont(font)
        self.writeInputToFileButton.setObjectName("writeInputToFileButton")
        self.horizontalLayout_6.addWidget(self.writeInputToFileButton)
        self.readInputFromFileButton = QtWidgets.QPushButton(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.readInputFromFileButton.setFont(font)
        self.readInputFromFileButton.setObjectName("readInputFromFileButton")
        self.horizontalLayout_6.addWidget(self.readInputFromFileButton)
        self.verticalLayout.addLayout(self.horizontalLayout_6)
        self.output = QtWidgets.QTextEdit(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.output.setFont(font)
        self.output.setReadOnly(True)
        self.output.setObjectName("output")
        self.verticalLayout.addWidget(self.output)
        self.horizontalLayout_7 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_7.setObjectName("horizontalLayout_7")
        self.writeOutputToFileButton = QtWidgets.QPushButton(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.writeOutputToFileButton.setFont(font)
        self.writeOutputToFileButton.setObjectName("writeOutputToFileButton")
        self.horizontalLayout_7.addWidget(self.writeOutputToFileButton)
        self.readOutputFromFileButton = QtWidgets.QPushButton(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.readOutputFromFileButton.setFont(font)
        self.readOutputFromFileButton.setObjectName("readOutputFromFileButton")
        self.horizontalLayout_7.addWidget(self.readOutputFromFileButton)
        self.verticalLayout.addLayout(self.horizontalLayout_7)
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.key = QtWidgets.QLineEdit(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.key.setFont(font)
        self.key.setFocusPolicy(QtCore.Qt.WheelFocus)
        self.key.setText("")
        self.key.setObjectName("key")
        self.horizontalLayout_3.addWidget(self.key)
        self.initVect = QtWidgets.QLineEdit(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.initVect.setFont(font)
        self.initVect.setObjectName("initVect")
        self.horizontalLayout_3.addWidget(self.initVect)
        self.verticalLayout.addLayout(self.horizontalLayout_3)
        self.horizontalLayout_8 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_8.setObjectName("horizontalLayout_8")
        self.writeKeyToFileButton = QtWidgets.QPushButton(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.writeKeyToFileButton.setFont(font)
        self.writeKeyToFileButton.setObjectName("writeKeyToFileButton")
        self.horizontalLayout_8.addWidget(self.writeKeyToFileButton)
        self.readKeyFromFileButton = QtWidgets.QPushButton(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.readKeyFromFileButton.setFont(font)
        self.readKeyFromFileButton.setObjectName("readKeyFromFileButton")
        self.horizontalLayout_8.addWidget(self.readKeyFromFileButton)
        self.verticalLayout.addLayout(self.horizontalLayout_8)
        self.mode = QtWidgets.QComboBox(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.mode.setFont(font)
        self.mode.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.mode.setObjectName("mode")
        self.mode.addItem("")
        self.mode.addItem("")
        self.mode.addItem("")
        self.mode.addItem("")
        self.verticalLayout.addWidget(self.mode)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.inputFileText = QtWidgets.QLabel(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.inputFileText.setFont(font)
        self.inputFileText.setObjectName("inputFileText")
        self.horizontalLayout.addWidget(self.inputFileText)
        self.inputFilePath = QtWidgets.QLineEdit(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.inputFilePath.setFont(font)
        self.inputFilePath.setObjectName("inputFilePath")
        self.horizontalLayout.addWidget(self.inputFilePath)
        self.inputFilePathButton = QtWidgets.QPushButton(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.inputFilePathButton.setFont(font)
        self.inputFilePathButton.setObjectName("inputFilePathButton")
        self.horizontalLayout.addWidget(self.inputFilePathButton)
        self.verticalLayout.addLayout(self.horizontalLayout)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.outputFileText = QtWidgets.QLabel(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.outputFileText.setFont(font)
        self.outputFileText.setObjectName("outputFileText")
        self.horizontalLayout_2.addWidget(self.outputFileText)
        self.outputFilePath = QtWidgets.QLineEdit(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.outputFilePath.setFont(font)
        self.outputFilePath.setObjectName("outputFilePath")
        self.horizontalLayout_2.addWidget(self.outputFilePath)
        self.outputFilePathButton = QtWidgets.QPushButton(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.outputFilePathButton.setFont(font)
        self.outputFilePathButton.setObjectName("outputFilePathButton")
        self.horizontalLayout_2.addWidget(self.outputFilePathButton)
        self.verticalLayout.addLayout(self.horizontalLayout_2)
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.encrypt = QtWidgets.QPushButton(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.encrypt.setFont(font)
        self.encrypt.setObjectName("encrypt")
        self.horizontalLayout_5.addWidget(self.encrypt)
        self.decrypt = QtWidgets.QPushButton(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.decrypt.setFont(font)
        self.decrypt.setObjectName("decrypt")
        self.horizontalLayout_5.addWidget(self.decrypt)
        self.verticalLayout.addLayout(self.horizontalLayout_5)
        self.progressBar = QtWidgets.QProgressBar(GOST)
        self.progressBar.setGeometry(QtCore.QRect(30, 632, 959, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.progressBar.setFont(font)
        self.progressBar.setProperty("value", 0)
        self.progressBar.setTextDirection(QtWidgets.QProgressBar.TopToBottom)
        self.progressBar.setObjectName("progressBar")
        self.cypherName = QtWidgets.QLabel(GOST)
        self.cypherName.setGeometry(QtCore.QRect(30, 10, 959, 29))
        font = QtGui.QFont()
        font.setPointSize(18)
        self.cypherName.setFont(font)
        self.cypherName.setAlignment(QtCore.Qt.AlignCenter)
        self.cypherName.setObjectName("cypherName")
        self.timeSpentText = QtWidgets.QLabel(GOST)
        self.timeSpentText.setGeometry(QtCore.QRect(30, 607, 961, 20))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.timeSpentText.setFont(font)
        self.timeSpentText.setAlignment(QtCore.Qt.AlignCenter)
        self.timeSpentText.setObjectName("timeSpentText")

        self.retranslateUi(GOST)
        QtCore.QMetaObject.connectSlotsByName(GOST)

        self.gost = gost()

        self.toggleType()
        self.toggleInitVect()
        self.key.setText('this_is_a_pasw_for_GOST_28147_89')

        self.encrypt.clicked.connect(self.encryptText)
        self.decrypt.clicked.connect(self.decryptText)
        self.type.currentTextChanged.connect(self.toggleType)
        self.mode.currentTextChanged.connect(self.toggleInitVect)
        self.writeInputToFileButton.clicked.connect(lambda: self.writeTextToFile(self.input))
        self.writeOutputToFileButton.clicked.connect(lambda: self.writeTextToFile(self.output))
        self.writeKeyToFileButton.clicked.connect(lambda: self.writeTextToFile(self.key))
        self.readInputFromFileButton.clicked.connect(lambda: self.readTextFromFile(self.input))
        self.readOutputFromFileButton.clicked.connect(lambda: self.readTextFromFile(self.output))
        self.readKeyFromFileButton.clicked.connect(lambda: self.readTextFromFile(self.key))
        self.inputFilePathButton.clicked.connect(lambda: self.getPath(self.inputFilePath))
        self.outputFilePathButton.clicked.connect(lambda: self.getPath(self.outputFilePath))

    def encryptText(self):
        match self.type.currentText():
            case 'Текст':
                encrypted_text = ''
                text = self.input.toPlainText()

                match self.mode.currentText():
                    case 'ECB':
                        encrypted_text = self.gost.ECB(text, self.key.text(), 'enc')
                    case 'CBC':
                        encrypted_text = self.gost.CBC(text, self.key.text(), self.initVect.text(), 'enc')
                    case 'CFB':
                        encrypted_text = self.gost.CFB(text, self.key.text(), self.initVect.text(), 'enc')
                    case 'OFB':
                        encrypted_text = self.gost.OFB(text, self.key.text(), self.initVect.text(), 'enc')

                self.output.setText(encrypted_text)

            case 'Файл':
                self.progressBar.show()
                self.timeSpentText.show()
                file_size = os.path.getsize(self.inputFilePath.text())

                with open(self.inputFilePath.text(), 'a') as file_input:
                    file_input.write(' ' * (8 - file_size % 8))

                with open(self.inputFilePath.text(), 'rb') as file_input, \
                        open(self.outputFilePath.text(), 'wb+') as file_output:

                    if len(self.key.text()[:32]) < 8:
                        print('Короткий ключ')
                        os.truncate(self.inputFilePath.text(), file_size)
                        return

                    if self.mode.currentText() != 'ECB':
                        if len(self.initVect.text()[:8]) < 8:
                            print('Короткий вектор')
                            os.truncate(self.inputFilePath.text(), file_size)
                            return

                    key_bin = bitarray.bitarray()
                    key_bin.frombytes(self.key.text()[:32].encode('koi8-r'))
                    init_vect_bin = bitarray.bitarray()
                    init_vect_bin.frombytes(self.initVect.text()[:8].encode('koi8-r'))

                    bytes_count = 0
                    begin_time = time()

                    file_output.write(file_size.to_bytes(8, byteorder='big'))
                    match self.mode.currentText():
                        case 'ECB':
                            while (text := file_input.read(8)):
                                text_bin = bitarray.bitarray()
                                text_bin.frombytes(text)
                                file_output.write(self.gost.encrypt(text_bin, key_bin).tobytes())

                                bytes_count += 8
                                self.progressBar.setValue((bytes_count * 100) // (file_size + 1))
                                curr_time = time() - begin_time
                                self.timeSpentText.setText(
                                    f'Размер файла {file_size} байт. Прошло времени: {round(curr_time)} секунд')
                        case 'CBC':
                            vect = init_vect_bin
                            while (text := file_input.read(8)):
                                text_bin = bitarray.bitarray()
                                text_bin.frombytes(text)
                                vect = self.gost.encrypt(text_bin ^ vect, key_bin)
                                file_output.write(vect.tobytes())

                                bytes_count += 8
                                self.progressBar.setValue((bytes_count * 100) // (file_size + 1))
                                curr_time = time() - begin_time
                                self.timeSpentText.setText(
                                    f'Размер файла {file_size} байт. Прошло времени: {round(curr_time)} секунд')
                        case 'CFB':
                            vect = init_vect_bin
                            while (text := file_input.read(8)):
                                text_bin = bitarray.bitarray()
                                text_bin.frombytes(text)
                                vect = self.gost.encrypt(vect, key_bin) ^ text_bin
                                file_output.write(vect.tobytes())

                                bytes_count += 8
                                self.progressBar.setValue((bytes_count * 100) // (file_size + 1))
                                curr_time = time() - begin_time
                                self.timeSpentText.setText(
                                    f'Размер файла {file_size} байт. Прошло времени: {round(curr_time)} секунд')
                        case 'OFB':
                            vect = init_vect_bin
                            while (text := file_input.read(8)):
                                text_bin = bitarray.bitarray()
                                text_bin.frombytes(text)
                                vect = self.gost.encrypt(vect, key_bin)
                                file_output.write((vect ^ text_bin).tobytes())

                                bytes_count += 8
                                self.progressBar.setValue((bytes_count * 100) // (file_size + 1))
                                curr_time = time() - begin_time
                                self.timeSpentText.setText(
                                    f'Размер файла {file_size} байт. Прошло времени: {round(curr_time)} секунд')

                    os.truncate(self.inputFilePath.text(), file_size)

    def decryptText(self):
        match self.type.currentText():
            case 'Текст':
                decrypted_text = ''
                text = self.input.toPlainText()

                match self.mode.currentText():
                    case 'ECB':
                        decrypted_text = self.gost.ECB(text, self.key.text(), 'dec')
                    case 'CBC':
                        decrypted_text = self.gost.CBC(text, self.key.text(), self.initVect.text(), 'dec')
                    case 'CFB':
                        decrypted_text = self.gost.CFB(text, self.key.text(), self.initVect.text(), 'dec')
                    case 'OFB':
                        decrypted_text = self.gost.OFB(text, self.key.text(), self.initVect.text(), 'dec')

                self.output.setText(decrypted_text)

            case 'Файл':
                self.progressBar.show()
                self.timeSpentText.show()
                file_size = os.path.getsize(self.inputFilePath.text())

                with open(self.inputFilePath.text(), 'a') as file_input:
                    file_input.write(' ' * (8 - file_size % 8))

                with open(self.inputFilePath.text(), 'rb') as file_input, \
                        open(self.outputFilePath.text(), 'wb+') as file_output:

                    if len(self.key.text()[:32]) < 8:
                        print('Короткий ключ')
                        os.truncate(self.inputFilePath.text(), file_size)
                        return

                    if self.mode.currentText() != 'ECB':
                        if len(self.initVect.text()[:8]) < 8:
                            print('Короткий вектор')
                            os.truncate(self.inputFilePath.text(), file_size)
                            return

                    key_bin = bitarray.bitarray()
                    key_bin.frombytes(self.key.text()[:32].encode('koi8-r'))
                    init_vect_bin = bitarray.bitarray()
                    init_vect_bin.frombytes(self.initVect.text()[:8].encode('koi8-r'))

                    bytes_count = 0
                    begin_time = time()

                    true_file_size = int.from_bytes(file_input.read(8), byteorder='big')
                    match self.mode.currentText():
                        case 'ECB':
                            while (text := file_input.read(8)):
                                text_bin = bitarray.bitarray()
                                text_bin.frombytes(text)
                                file_output.write(self.gost.decrypt(text_bin, key_bin).tobytes())

                                bytes_count += 8
                                self.progressBar.setValue((bytes_count * 100) // file_size)
                                curr_time = time() - begin_time
                                self.timeSpentText.setText(
                                    f'Размер файла {file_size} байт. Прошло времени: {round(curr_time)} секунд')
                        case 'CBC':
                            vect = init_vect_bin
                            while (text := file_input.read(8)):
                                text_bin = bitarray.bitarray()
                                text_bin.frombytes(text)
                                file_output.write((vect ^ self.gost.decrypt(text_bin, key_bin)).tobytes())
                                vect = text_bin

                                bytes_count += 8
                                self.progressBar.setValue((bytes_count * 100) // file_size)
                                curr_time = time() - begin_time
                                self.timeSpentText.setText(
                                    f'Размер файла {file_size} байт. Прошло времени: {round(curr_time)} секунд')
                        case 'CFB':
                            vect = init_vect_bin
                            while (text := file_input.read(8)):
                                text_bin = bitarray.bitarray()
                                text_bin.frombytes(text)
                                file_output.write((self.gost.encrypt(vect, key_bin) ^ text_bin).tobytes())
                                vect = text_bin

                                bytes_count += 8
                                self.progressBar.setValue((bytes_count * 100) // file_size)
                                curr_time = time() - begin_time
                                self.timeSpentText.setText(
                                    f'Размер файла {file_size} байт. Прошло времени: {round(curr_time)} секунд')
                        case 'OFB':
                            vect = init_vect_bin
                            while (text := file_input.read(8)):
                                text_bin = bitarray.bitarray()
                                text_bin.frombytes(text)
                                vect = self.gost.encrypt(vect, key_bin)
                                file_output.write((vect ^ text_bin).tobytes())

                                bytes_count += 8
                                self.progressBar.setValue((bytes_count * 100) // file_size)
                                curr_time = time() - begin_time
                                self.timeSpentText.setText(
                                    f'Размер файла {file_size} байт. Прошло времени: {round(curr_time)} секунд')

                    file_output.truncate(true_file_size)

    def readTextFromFile(self, obj):
        path = QFileDialog.getOpenFileName()[0]
        extension = path.split('/')[-1].split('.')[-1]

        if extension != 'txt':
            return

        with open(path, 'r', encoding='koi8-r') as file:
            text = file.read()
            obj.setText(text)

    def writeTextToFile(self, obj):
        path = QFileDialog.getOpenFileName()[0]
        with open(path, 'w+', encoding='koi8-r') as file:
            try:
                text = obj.toPlainText()
            except:
                text = obj.text()
            file.write(text)

    def getPath(self, obj):
        path = QFileDialog.getOpenFileName()[0]
        if path[-4:] != 'gost':
            self.outputFilePath.setText(path + '.gost')
        else:
            self.outputFilePath.setText(path[:-5])
        obj.setText(path)

    def toggleInitVect(self):
        if self.mode.currentText() == 'ECB':
            self.initVect.hide()
        else:
            self.initVect.show()

    def toggleType(self):
        self.progressBar.hide()
        self.timeSpentText.hide()

        text_widgets = [self.inputFileText, self.inputFilePath, self.inputFilePathButton,
                        self.outputFileText, self.outputFilePath, self.outputFilePathButton]
        file_widgets = [self.input, self.writeInputToFileButton, self.readInputFromFileButton,
                        self.output, self.writeOutputToFileButton, self.readOutputFromFileButton]

        if self.type.currentText() == 'Текст':
            for elem in text_widgets:
                elem.hide()
            for elem in file_widgets:
                elem.show()
        else:
            for elem in file_widgets:
                elem.hide()
            for elem in text_widgets:
                elem.show()

    def retranslateUi(self, GOST):
        _translate = QtCore.QCoreApplication.translate
        GOST.setWindowTitle(_translate("GOST", "GOST"))
        self.type.setItemText(0, _translate("GOST", "Текст"))
        self.type.setItemText(1, _translate("GOST", "Файл"))
        self.writeInputToFileButton.setText(_translate("GOST", "Записать в файл"))
        self.readInputFromFileButton.setText(_translate("GOST", "Считать из файла"))
        self.writeOutputToFileButton.setText(_translate("GOST", "Записать в файл"))
        self.readOutputFromFileButton.setText(_translate("GOST", "Считать из файла"))
        self.key.setPlaceholderText(_translate("GOST", "Ключ (32 символа)"))
        self.initVect.setPlaceholderText(_translate("GOST", "Вектор инициализации (8 символов)"))
        self.writeKeyToFileButton.setText(_translate("GOST", "Записать ключ в файл"))
        self.readKeyFromFileButton.setText(_translate("GOST", "Считать ключ из файла"))
        self.mode.setItemText(0, _translate("GOST", "ECB"))
        self.mode.setItemText(1, _translate("GOST", "CBC"))
        self.mode.setItemText(2, _translate("GOST", "CFB"))
        self.mode.setItemText(3, _translate("GOST", "OFB"))
        self.inputFileText.setText(_translate("GOST", "Входной файл  "))
        self.inputFilePathButton.setText(_translate("GOST", "Указать путь"))
        self.outputFileText.setText(_translate("GOST", "Выходной файл"))
        self.outputFilePathButton.setText(_translate("GOST", "Указать путь"))
        self.encrypt.setText(_translate("GOST", "Зашифровать"))
        self.decrypt.setText(_translate("GOST", "Расшифровать"))
        self.cypherName.setText(_translate("GOST", "ГОСТ 28147-89"))
        self.timeSpentText.setText(_translate("GOST", "Прошло"))
